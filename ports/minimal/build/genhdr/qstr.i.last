# 1 "../../py/modbuiltins.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "../../py/modbuiltins.c"
# 27 "../../py/modbuiltins.c"
# 1 "include/stdio.h" 1
# 29 "include/stdio.h"
# 1 "include/_ansi.h" 1
# 10 "include/_ansi.h"
# 1 "include/newlib.h" 1
# 14 "include/newlib.h"
# 1 "include/_newlib_version.h" 1
# 15 "include/newlib.h" 2
# 11 "include/_ansi.h" 2
# 1 "include/sys/config.h" 1



# 1 "include/machine/ieeefp.h" 1
# 5 "include/sys/config.h" 2
# 1 "include/sys/features.h" 1
# 6 "include/sys/config.h" 2
# 12 "include/_ansi.h" 2
# 30 "include/stdio.h" 2





# 1 "include/sys/cdefs.h" 1
# 43 "include/sys/cdefs.h"
# 1 "include/machine/_default_types.h" 1
# 41 "include/machine/_default_types.h"
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "include/machine/_default_types.h"
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "include/machine/_default_types.h"
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 103 "include/machine/_default_types.h"
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "include/machine/_default_types.h"
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "include/machine/_default_types.h"
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "include/machine/_default_types.h"
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 200 "include/machine/_default_types.h"
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "include/machine/_default_types.h"
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 44 "include/sys/cdefs.h" 2

# 1 "include/stddef.h" 1
# 216 "include/stddef.h"
typedef unsigned int size_t;
# 46 "include/sys/cdefs.h" 2
# 36 "include/stdio.h" 2
# 1 "include/stddef.h" 1
# 149 "include/stddef.h"
typedef int ptrdiff_t;
# 328 "include/stddef.h"
typedef long int wchar_t;
# 426 "include/stddef.h"
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "include/stddef.h"
} max_align_t;
# 37 "include/stdio.h" 2



# 1 "include/stdarg.h" 1
# 40 "include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
# 41 "include/stdio.h" 2
# 60 "include/stdio.h"
# 1 "include/sys/reent.h" 1
# 13 "include/sys/reent.h"
# 1 "include/_ansi.h" 1
# 14 "include/sys/reent.h" 2
# 1 "include/stddef.h" 1
# 15 "include/sys/reent.h" 2
# 1 "include/sys/_types.h" 1
# 24 "include/sys/_types.h"
# 1 "include/machine/_types.h" 1
# 17 "include/machine/_types.h"
typedef __int64_t __blkcnt_t;


typedef __int32_t __blksize_t;


typedef __uint32_t __dev_t;



typedef unsigned long __fsblkcnt_t;



typedef unsigned long __fsfilcnt_t;


typedef __uint32_t __uid_t;


typedef __uint32_t __gid_t;


typedef __uint64_t __ino_t;


typedef long long __key_t;


typedef __uint16_t __sa_family_t;



typedef int __socklen_t;
# 25 "include/sys/_types.h" 2
# 1 "include/sys/lock.h" 1
# 12 "include/sys/lock.h"
typedef void *_LOCK_T;
# 42 "include/sys/lock.h"
void __cygwin_lock_init(_LOCK_T *);
void __cygwin_lock_init_recursive(_LOCK_T *);
void __cygwin_lock_fini(_LOCK_T *);
void __cygwin_lock_lock(_LOCK_T *);
int __cygwin_lock_trylock(_LOCK_T *);
void __cygwin_lock_unlock(_LOCK_T *);
# 26 "include/sys/_types.h" 2
# 44 "include/sys/_types.h"
typedef long _off_t;





typedef int __pid_t;
# 65 "include/sys/_types.h"
typedef __uint32_t __id_t;
# 88 "include/sys/_types.h"
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;
# 114 "include/sys/_types.h"
typedef long _fpos_t;
# 129 "include/sys/_types.h"
typedef unsigned int __size_t;
# 145 "include/sys/_types.h"
typedef signed int _ssize_t;
# 156 "include/sys/_types.h"
typedef _ssize_t __ssize_t;


# 1 "include/stddef.h" 1
# 357 "include/stddef.h"
typedef unsigned int wint_t;
# 160 "include/sys/_types.h" 2



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_T _flock_t;




typedef void *_iconv_t;






typedef unsigned long __clock_t;






typedef __int_least64_t __time_t;


typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;
# 210 "include/sys/_types.h"
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;


typedef __builtin_va_list __va_list;
# 16 "include/sys/reent.h" 2






typedef unsigned long __ULong;
# 38 "include/sys/reent.h"
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 93 "include/sys/reent.h"
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 117 "include/sys/reent.h"
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 181 "include/sys/reent.h"
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (*_read) (struct _reent *, void *,
        char *, int);
  int (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "include/sys/reent.h"
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 319 "include/sys/reent.h"
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 569 "include/sys/reent.h"
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;

  __FILE __sf[3];

};
# 775 "include/sys/reent.h"
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 61 "include/stdio.h" 2
# 1 "include/sys/types.h" 1
# 28 "include/sys/types.h"
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef int register_t;
# 62 "include/sys/types.h"
# 1 "include/stddef.h" 1
# 63 "include/sys/types.h" 2

# 1 "include/sys/_stdint.h" 1
# 20 "include/sys/_stdint.h"
typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 65 "include/sys/types.h" 2
# 113 "include/sys/types.h"
typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long clock_t;





typedef __int_least64_t time_t;





typedef long daddr_t;



typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t;




typedef __ino_t ino_t;
# 173 "include/sys/types.h"
typedef __off_t off_t;



typedef __dev_t dev_t;



typedef __uid_t uid_t;



typedef __gid_t gid_t;




typedef __pid_t pid_t;




typedef __key_t key_t;




typedef _ssize_t ssize_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t;




typedef __suseconds_t suseconds_t;



typedef __int64_t sbintime_t;


# 1 "include/sys/_pthreadtypes.h" 1
# 15 "include/sys/_pthreadtypes.h"
typedef struct __pthread_t {char __dummy;} *pthread_t;
typedef struct __pthread_mutex_t {char __dummy;} *pthread_mutex_t;

typedef struct __pthread_key_t {char __dummy;} *pthread_key_t;
typedef struct __pthread_attr_t {char __dummy;} *pthread_attr_t;
typedef struct __pthread_mutexattr_t {char __dummy;} *pthread_mutexattr_t;
typedef struct __pthread_condattr_t {char __dummy;} *pthread_condattr_t;
typedef struct __pthread_cond_t {char __dummy;} *pthread_cond_t;
typedef struct __pthread_barrierattr_t {char __dummy;} *pthread_barrierattr_t;
typedef struct __pthread_barrier_t {char __dummy;} *pthread_barrier_t;


typedef struct
{
  pthread_mutex_t mutex;
  int state;
}
pthread_once_t;
typedef struct __pthread_spinlock_t {char __dummy;} *pthread_spinlock_t;
typedef struct __pthread_rwlock_t {char __dummy;} *pthread_rwlock_t;
typedef struct __pthread_rwlockattr_t {char __dummy;} *pthread_rwlockattr_t;
# 240 "include/sys/types.h" 2
# 1 "include/machine/types.h" 1
# 19 "include/machine/types.h"
# 1 "include/endian.h" 1
# 20 "include/machine/types.h" 2
# 1 "include/bits/wordsize.h" 1
# 21 "include/machine/types.h" 2
# 1 "include/sys/_timespec.h" 1
# 45 "include/sys/_timespec.h"
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 22 "include/machine/types.h" 2



typedef struct timespec timespec_t;




typedef struct timespec timestruc_t;


typedef __loff_t loff_t;
# 46 "include/machine/types.h"
struct flock {
 short l_type;
 short l_whence;
 off_t l_start;
 off_t l_len;
 pid_t l_pid;
};






typedef unsigned long vm_offset_t;




typedef unsigned long vm_size_t;




typedef void *vm_object_t;




typedef char *addr_t;





# 1 "include/sys/sysmacros.h" 1
# 12 "include/sys/sysmacros.h"
# 1 "include/sys/types.h" 1
# 13 "include/sys/sysmacros.h" 2

static __inline__ int gnu_dev_major(dev_t);
static __inline__ int gnu_dev_minor(dev_t);
static __inline__ dev_t gnu_dev_makedev(int, int);

static __inline__ int
gnu_dev_major(dev_t dev)
{
 return (int)(((dev) >> 16) & 0xffff);
}

static __inline__ int
gnu_dev_minor(dev_t dev)
{
 return (int)((dev) & 0xffff);
}

static __inline__ dev_t
gnu_dev_makedev(int maj, int min)
{
 return (((maj) << 16) | ((min) & 0xffff));
}
# 81 "include/machine/types.h" 2
# 241 "include/sys/types.h" 2
# 62 "include/stdio.h" 2




typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "include/sys/stdio.h" 1
# 33 "include/sys/stdio.h"


ssize_t getline (char **, size_t *, FILE *);
ssize_t getdelim (char **, size_t *, int, FILE *);


# 80 "include/stdio.h" 2
# 186 "include/stdio.h"
FILE * tmpfile (void);
char * tmpnam (char *);



int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *restrict, const char *restrict, FILE *restrict);
void setbuf (FILE *restrict, char *restrict);
int setvbuf (FILE *restrict, char *restrict, int, size_t);
int fprintf (FILE *restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int fscanf (FILE *restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int printf (const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 1, 2)));
int scanf (const char *restrict, ...)
               __attribute__ ((__format__ (__scanf__, 1, 2)));
int sscanf (const char *restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int vfprintf (FILE *restrict, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int vprintf (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 1, 0)));
int vsprintf (char *restrict, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int fgetc (FILE *);
char * fgets (char *restrict, int, FILE *restrict);
int fputc (int, FILE *);
int fputs (const char *restrict, FILE *restrict);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void *restrict, size_t _size, size_t _n, FILE *restrict);
size_t fwrite (const void *restrict , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *restrict, fpos_t *restrict);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char *restrict _name, const char *restrict _type);
int sprintf (char *restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int remove (const char *);
int rename (const char *, const char *);
# 266 "include/stdio.h"
int snprintf (char *restrict, size_t, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int vsnprintf (char *restrict, size_t, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int vfscanf (FILE *restrict, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int vscanf (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 1, 0)));
int vsscanf (const char *restrict, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
# 396 "include/stdio.h"
int _asiprintf_r (struct _reent *, char **, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
char * _asnprintf_r (struct _reent *, char *restrict, size_t *restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
int _asprintf_r (struct _reent *, char **restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _diprintf_r (struct _reent *, int, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _dprintf_r (struct _reent *, int, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *restrict, int, FILE *restrict);
char * _fgets_unlocked_r (struct _reent *, char *restrict, int, FILE *restrict);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _fiscanf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
FILE * _fmemopen_r (struct _reent *, void *restrict, size_t, const char *restrict);
FILE * _fopen_r (struct _reent *, const char *restrict, const char *restrict);
FILE * _freopen_r (struct _reent *, const char *restrict, const char *restrict, FILE *restrict);
int _fprintf_r (struct _reent *, FILE *restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *restrict, FILE *restrict);
int _fputs_unlocked_r (struct _reent *, const char *restrict, FILE *restrict);
size_t _fread_r (struct _reent *, void *restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fread_unlocked_r (struct _reent *, void *restrict, size_t _size, size_t _n, FILE *restrict);
int _fscanf_r (struct _reent *, FILE *restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void *restrict, size_t _size, size_t _n, FILE *restrict);
size_t _fwrite_unlocked_r (struct _reent *, const void *restrict, size_t _size, size_t _n, FILE *restrict);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int _iscanf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *,
      const char *_old, const char *_new);
int _scanf_r (struct _reent *, const char *restrict, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int _siprintf_r (struct _reent *, char *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _siscanf_r (struct _reent *, const char *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
int _snprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
int _sprintf_r (struct _reent *, char *restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _sscanf_r (struct _reent *, const char *restrict, const char *restrict, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vdprintf_r (struct _reent *, int, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));
int _vfprintf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vfscanf_r (struct _reent *, FILE *restrict, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int _vprintf_r (struct _reent *, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int _vscanf_r (struct _reent *, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
int _vsnprintf_r (struct _reent *, char *restrict, size_t, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
int _vsprintf_r (struct _reent *, char *restrict, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vsscanf_r (struct _reent *, const char *restrict, const char *restrict, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);
# 577 "include/stdio.h"
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 687 "include/stdio.h"
static __inline__ int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {




 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
# 741 "include/stdio.h"
static __inline int
_getchar_unlocked(void)
{
 struct _reent *_ptr;

 _ptr = _impure_ptr;
 return ((--(((_ptr)->_stdin))->_r < 0 ? __srget_r(_ptr, ((_ptr)->_stdin)) : (int)(*(((_ptr)->_stdin))->_p++)));
}

static __inline int
_putchar_unlocked(int _c)
{
 struct _reent *_ptr;

 _ptr = _impure_ptr;
 return (__sputc_r(_ptr, _c, ((_ptr)->_stdout)));
}
# 797 "include/stdio.h"

# 28 "../../py/modbuiltins.c" 2
# 1 "include/assert.h" 1
# 39 "include/assert.h"
void __assert (const char *, int, const char *)
     __attribute__ ((__noreturn__));
void __assert_func (const char *, int, const char *, const char *)
     __attribute__ ((__noreturn__));
# 29 "../../py/modbuiltins.c" 2

# 1 "../../py/smallint.h" 1
# 29 "../../py/smallint.h"
# 1 "../../py/mpconfig.h" 1
# 45 "../../py/mpconfig.h"
# 1 "./mpconfigport.h" 1
# 1 "include/stdint.h" 1
# 16 "include/stdint.h"
# 1 "include/stdint-gcc.h" 1
# 34 "include/stdint-gcc.h"
typedef signed char int8_t;


typedef short int int16_t;


typedef long int int32_t;


typedef long long int int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef long unsigned int uint32_t;


typedef long long unsigned int uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef long int int_least32_t;
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef long unsigned int uint_least32_t;
typedef long long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long long unsigned int uint_fast64_t;




typedef int intptr_t;


typedef unsigned int uintptr_t;




typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;
# 17 "include/stdint.h" 2
# 2 "./mpconfigport.h" 2
# 70 "./mpconfigport.h"
typedef int mp_int_t;
typedef unsigned mp_uint_t;

typedef long mp_off_t;
# 82 "./mpconfigport.h"
# 1 "include/alloca.h" 1
# 83 "./mpconfigport.h" 2
# 46 "../../py/mpconfig.h" 2
# 577 "../../py/mpconfig.h"
typedef double mp_float_t;
# 30 "../../py/smallint.h" 2
# 1 "../../py/misc.h" 1
# 33 "../../py/misc.h"
# 1 "include/stdbool.h" 1
# 34 "../../py/misc.h" 2

# 1 "include/stddef.h" 1
# 36 "../../py/misc.h" 2

typedef unsigned char byte;
typedef unsigned int uint;
# 87 "../../py/misc.h"
void *m_malloc(size_t num_bytes);
void *m_malloc_maybe(size_t num_bytes);
void *m_malloc_with_finaliser(size_t num_bytes);
void *m_malloc0(size_t num_bytes);





void *m_realloc(void *ptr, size_t new_num_bytes);
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, _Bool allow_move);
void m_free(void *ptr);

__attribute__((noreturn)) void m_malloc_fail(size_t num_bytes);
# 124 "../../py/misc.h"
typedef uint unichar;







static inline unichar utf8_get_char(const byte *s) { return *s; }
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
static inline size_t utf8_charlen(const byte *str, size_t len) { (void)str; return len; }


_Bool unichar_isspace(unichar c);
_Bool unichar_isalpha(unichar c);
_Bool unichar_isprint(unichar c);
_Bool unichar_isdigit(unichar c);
_Bool unichar_isxdigit(unichar c);
_Bool unichar_isident(unichar c);
_Bool unichar_isupper(unichar c);
_Bool unichar_islower(unichar c);
unichar unichar_tolower(unichar c);
unichar unichar_toupper(unichar c);
mp_uint_t unichar_xdigit_value(unichar c);





typedef struct _vstr_t {
    size_t alloc;
    size_t len;
    char *buf;
    _Bool fixed_buf : 1;
} vstr_t;




void vstr_init(vstr_t *vstr, size_t alloc);
void vstr_init_len(vstr_t *vstr, size_t len);
void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf);
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
void vstr_hint_size(vstr_t *vstr, size_t size);
char *vstr_extend(vstr_t *vstr, size_t size);
char *vstr_add_len(vstr_t *vstr, size_t len);
char *vstr_null_terminated_str(vstr_t *vstr);
void vstr_add_byte(vstr_t *vstr, byte v);
void vstr_add_char(vstr_t *vstr, unichar chr);
void vstr_add_str(vstr_t *vstr, const char *str);
void vstr_add_strn(vstr_t *vstr, const char *str, size_t len);
void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b);
void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr);
void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_tail_bytes(vstr_t *vstr, size_t bytes_to_cut);
void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut);
void vstr_printf(vstr_t *vstr, const char *fmt, ...);
# 206 "../../py/misc.h"
int DEBUG_printf(const char *fmt, ...);

extern mp_uint_t mp_verbose_flag;
# 31 "../../py/smallint.h" 2
# 64 "../../py/smallint.h"
_Bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y);
mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor);
mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom);
# 31 "../../py/modbuiltins.c" 2
# 1 "../../py/objint.h" 1
# 29 "../../py/objint.h"
# 1 "../../py/mpz.h" 1
# 64 "../../py/mpz.h"
typedef uint16_t mpz_dig_t;
typedef uint32_t mpz_dbl_dig_t;
typedef int32_t mpz_dbl_dig_signed_t;
# 93 "../../py/mpz.h"
typedef struct _mpz_t {
    size_t neg : 1;
    size_t fixed_dig : 1;
    size_t alloc : 8 * sizeof(size_t) - 2;
    size_t len;
    mpz_dig_t *dig;
} mpz_t;




void mpz_init_zero(mpz_t *z);
void mpz_init_from_int(mpz_t *z, mp_int_t val);
void mpz_init_fixed_from_int(mpz_t *z, mpz_dig_t *dig, size_t dig_alloc, mp_int_t val);
void mpz_deinit(mpz_t *z);

void mpz_set(mpz_t *dest, const mpz_t *src);
void mpz_set_from_int(mpz_t *z, mp_int_t src);
void mpz_set_from_ll(mpz_t *z, long long i, _Bool is_signed);

void mpz_set_from_float(mpz_t *z, mp_float_t src);

size_t mpz_set_from_str(mpz_t *z, const char *str, size_t len, _Bool neg, unsigned int base);
void mpz_set_from_bytes(mpz_t *z, _Bool big_endian, size_t len, const byte *buf);

static inline _Bool mpz_is_zero(const mpz_t *z) { return z->len == 0; }
static inline _Bool mpz_is_neg(const mpz_t *z) { return z->len != 0 && z->neg != 0; }
int mpz_cmp(const mpz_t *lhs, const mpz_t *rhs);

void mpz_abs_inpl(mpz_t *dest, const mpz_t *z);
void mpz_neg_inpl(mpz_t *dest, const mpz_t *z);
void mpz_not_inpl(mpz_t *dest, const mpz_t *z);
void mpz_shl_inpl(mpz_t *dest, const mpz_t *lhs, mp_uint_t rhs);
void mpz_shr_inpl(mpz_t *dest, const mpz_t *lhs, mp_uint_t rhs);
void mpz_add_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_sub_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_mul_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_pow_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_pow3_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs, const mpz_t *mod);
void mpz_and_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_or_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_xor_inpl(mpz_t *dest, const mpz_t *lhs, const mpz_t *rhs);
void mpz_divmod_inpl(mpz_t *dest_quo, mpz_t *dest_rem, const mpz_t *lhs, const mpz_t *rhs);

static inline size_t mpz_max_num_bits(const mpz_t *z) { return z->len * (16); }
mp_int_t mpz_hash(const mpz_t *z);
_Bool mpz_as_int_checked(const mpz_t *z, mp_int_t *value);
_Bool mpz_as_uint_checked(const mpz_t *z, mp_uint_t *value);
void mpz_as_bytes(const mpz_t *z, _Bool big_endian, size_t len, byte *buf);

mp_float_t mpz_as_float(const mpz_t *z);

size_t mpz_as_str_inpl(const mpz_t *z, unsigned int base, const char *prefix, char base_char, char comma, char *str);
# 30 "../../py/objint.h" 2
# 1 "../../py/obj.h" 1
# 31 "../../py/obj.h"
# 1 "../../py/qstr.h" 1
# 39 "../../py/qstr.h"
enum {





    MP_QSTRnumber_of,
};

typedef size_t qstr;

typedef struct _qstr_pool_t {
    struct _qstr_pool_t *prev;
    size_t total_prev_len;
    size_t alloc;
    size_t len;
    const byte *qstrs[];
} qstr_pool_t;




void qstr_init(void);

mp_uint_t qstr_compute_hash(const byte *data, size_t len);
qstr qstr_find_strn(const char *str, size_t str_len);

qstr qstr_from_str(const char *str);
qstr qstr_from_strn(const char *str, size_t len);

mp_uint_t qstr_hash(qstr q);
const char *qstr_str(qstr q);
size_t qstr_len(qstr q);
const byte *qstr_data(qstr q, size_t *len);

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes);
void qstr_dump_data(void);
# 32 "../../py/obj.h" 2
# 1 "../../py/mpprint.h" 1
# 48 "../../py/mpprint.h"
typedef void (*mp_print_strn_t)(void *data, const char *str, size_t len);

typedef struct _mp_print_t {
    void *data;
    mp_print_strn_t print_strn;
} mp_print_t;



extern const mp_print_t mp_plat_print;





int mp_print_str(const mp_print_t *print, const char *str);
int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width);

int mp_print_float(const mp_print_t *print, mp_float_t f, char fmt, int flags, char fill, int width, int prec);


int mp_printf(const mp_print_t *print, const char *fmt, ...);
# 33 "../../py/obj.h" 2
# 1 "../../py/runtime0.h" 1
# 45 "../../py/runtime0.h"
typedef enum {


    MP_UNARY_OP_POSITIVE,
    MP_UNARY_OP_NEGATIVE,
    MP_UNARY_OP_INVERT,
    MP_UNARY_OP_NOT,


    MP_UNARY_OP_NUM_BYTECODE,

    MP_UNARY_OP_BOOL = MP_UNARY_OP_NUM_BYTECODE,
    MP_UNARY_OP_LEN,
    MP_UNARY_OP_HASH,
    MP_UNARY_OP_ABS,
    MP_UNARY_OP_SIZEOF,

    MP_UNARY_OP_NUM_RUNTIME,
} mp_unary_op_t;



typedef enum {

    MP_BINARY_OP_LESS,
    MP_BINARY_OP_MORE,
    MP_BINARY_OP_EQUAL,
    MP_BINARY_OP_LESS_EQUAL,
    MP_BINARY_OP_MORE_EQUAL,
    MP_BINARY_OP_NOT_EQUAL,
    MP_BINARY_OP_IN,
    MP_BINARY_OP_IS,
    MP_BINARY_OP_EXCEPTION_MATCH,


    MP_BINARY_OP_INPLACE_OR,
    MP_BINARY_OP_INPLACE_XOR,
    MP_BINARY_OP_INPLACE_AND,
    MP_BINARY_OP_INPLACE_LSHIFT,
    MP_BINARY_OP_INPLACE_RSHIFT,
    MP_BINARY_OP_INPLACE_ADD,
    MP_BINARY_OP_INPLACE_SUBTRACT,
    MP_BINARY_OP_INPLACE_MULTIPLY,
    MP_BINARY_OP_INPLACE_FLOOR_DIVIDE,
    MP_BINARY_OP_INPLACE_TRUE_DIVIDE,
    MP_BINARY_OP_INPLACE_MODULO,
    MP_BINARY_OP_INPLACE_POWER,


    MP_BINARY_OP_OR,
    MP_BINARY_OP_XOR,
    MP_BINARY_OP_AND,
    MP_BINARY_OP_LSHIFT,
    MP_BINARY_OP_RSHIFT,
    MP_BINARY_OP_ADD,
    MP_BINARY_OP_SUBTRACT,
    MP_BINARY_OP_MULTIPLY,
    MP_BINARY_OP_FLOOR_DIVIDE,
    MP_BINARY_OP_TRUE_DIVIDE,
    MP_BINARY_OP_MODULO,
    MP_BINARY_OP_POWER,



    MP_BINARY_OP_NUM_BYTECODE,
# 128 "../../py/runtime0.h"
    MP_BINARY_OP_DIVMOD

        = MP_BINARY_OP_NUM_BYTECODE

    ,



    MP_BINARY_OP_CONTAINS,

    MP_BINARY_OP_NUM_RUNTIME,


    MP_BINARY_OP_NOT_IN,
    MP_BINARY_OP_IS_NOT,
} mp_binary_op_t;

typedef enum {
    MP_F_CONVERT_OBJ_TO_NATIVE = 0,
    MP_F_CONVERT_NATIVE_TO_OBJ,
    MP_F_LOAD_NAME,
    MP_F_LOAD_GLOBAL,
    MP_F_LOAD_BUILD_CLASS,
    MP_F_LOAD_ATTR,
    MP_F_LOAD_METHOD,
    MP_F_LOAD_SUPER_METHOD,
    MP_F_STORE_NAME,
    MP_F_STORE_GLOBAL,
    MP_F_STORE_ATTR,
    MP_F_OBJ_SUBSCR,
    MP_F_OBJ_IS_TRUE,
    MP_F_UNARY_OP,
    MP_F_BINARY_OP,
    MP_F_BUILD_TUPLE,
    MP_F_BUILD_LIST,
    MP_F_LIST_APPEND,
    MP_F_BUILD_MAP,
    MP_F_STORE_MAP,




    MP_F_MAKE_FUNCTION_FROM_RAW_CODE,
    MP_F_NATIVE_CALL_FUNCTION_N_KW,
    MP_F_CALL_METHOD_N_KW,
    MP_F_CALL_METHOD_N_KW_VAR,
    MP_F_NATIVE_GETITER,
    MP_F_NATIVE_ITERNEXT,
    MP_F_NLR_PUSH,
    MP_F_NLR_POP,
    MP_F_NATIVE_RAISE,
    MP_F_IMPORT_NAME,
    MP_F_IMPORT_FROM,
    MP_F_IMPORT_ALL,



    MP_F_UNPACK_SEQUENCE,
    MP_F_UNPACK_EX,
    MP_F_DELETE_NAME,
    MP_F_DELETE_GLOBAL,
    MP_F_NEW_CELL,
    MP_F_MAKE_CLOSURE_FROM_RAW_CODE,
    MP_F_SETUP_CODE_STATE,
    MP_F_SMALL_INT_FLOOR_DIVIDE,
    MP_F_SMALL_INT_MODULO,
    MP_F_NUMBER_OF,
} mp_fun_kind_t;

extern void *const mp_fun_table[MP_F_NUMBER_OF];
# 34 "../../py/obj.h" 2
# 42 "../../py/obj.h"
typedef void *mp_obj_t;
typedef const void *mp_const_obj_t;




typedef struct _mp_obj_type_t mp_obj_type_t;



struct _mp_obj_base_t {
    const mp_obj_type_t *type ;
};
typedef struct _mp_obj_base_t mp_obj_base_t;
# 84 "../../py/obj.h"
static inline _Bool MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }



static inline _Bool MP_OBJ_IS_QSTR(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 2); }






extern const struct _mp_obj_float_t mp_const_float_e_obj;
extern const struct _mp_obj_float_t mp_const_float_pi_obj;


mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);


static inline _Bool MP_OBJ_IS_OBJ(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
# 246 "../../py/obj.h"
typedef mp_const_obj_t mp_rom_obj_t;
# 339 "../../py/obj.h"
typedef struct _mp_map_elem_t {
    mp_obj_t key;
    mp_obj_t value;
} mp_map_elem_t;

typedef struct _mp_rom_map_elem_t {
    mp_rom_obj_t key;
    mp_rom_obj_t value;
} mp_rom_map_elem_t;






typedef struct _mp_map_t {
    size_t all_keys_are_qstrs : 1;
    size_t is_fixed : 1;
    size_t is_ordered : 1;
    size_t used : (8 * sizeof(size_t) - 3);
    size_t alloc;
    mp_map_elem_t *table;
} mp_map_t;


typedef enum _mp_map_lookup_kind_t {
    MP_MAP_LOOKUP = 0,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND = 1,
    MP_MAP_LOOKUP_REMOVE_IF_FOUND = 2,
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3,
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline _Bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != (((mp_obj_t)(void*)0)) && (map)->table[pos].key != (((mp_obj_t)(void*)8))); }

void mp_map_init(mp_map_t *map, size_t n);
void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table);
mp_map_t *mp_map_new(size_t n);
void mp_map_deinit(mp_map_t *map);
void mp_map_free(mp_map_t *map);
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
void mp_map_clear(mp_map_t *map);
void mp_map_dump(mp_map_t *map);



typedef struct _mp_set_t {
    size_t alloc;
    size_t used;
    mp_obj_t *table;
} mp_set_t;

static inline _Bool MP_SET_SLOT_IS_FILLED(const mp_set_t *set, size_t pos) { return ((set)->table[pos] != (((mp_obj_t)(void*)0)) && (set)->table[pos] != (((mp_obj_t)(void*)8))); }

void mp_set_init(mp_set_t *set, size_t n);
mp_obj_t mp_set_lookup(mp_set_t *set, mp_obj_t index, mp_map_lookup_kind_t lookup_kind);
mp_obj_t mp_set_remove_first(mp_set_t *set);
void mp_set_clear(mp_set_t *set);



typedef mp_obj_t (*mp_fun_0_t)(void);
typedef mp_obj_t (*mp_fun_1_t)(mp_obj_t);
typedef mp_obj_t (*mp_fun_2_t)(mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_3_t)(mp_obj_t, mp_obj_t, mp_obj_t);
typedef mp_obj_t (*mp_fun_var_t)(size_t n, const mp_obj_t *);


typedef mp_obj_t (*mp_fun_kw_t)(size_t n, const mp_obj_t *, mp_map_t *);

typedef enum {
    PRINT_STR = 0,
    PRINT_REPR = 1,
    PRINT_EXC = 2,
    PRINT_JSON = 3,
    PRINT_RAW = 4,
    PRINT_EXC_SUBCLASS = 0x80,
} mp_print_kind_t;

typedef struct _mp_obj_iter_buf_t {
    mp_obj_base_t base;
    mp_obj_t buf[3];
} mp_obj_iter_buf_t;





typedef void (*mp_print_fun_t)(const mp_print_t *print, mp_obj_t o, mp_print_kind_t kind);
typedef mp_obj_t (*mp_make_new_fun_t)(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_call_fun_t)(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
typedef mp_obj_t (*mp_unary_op_fun_t)(mp_unary_op_t op, mp_obj_t);
typedef mp_obj_t (*mp_binary_op_fun_t)(mp_binary_op_t op, mp_obj_t, mp_obj_t);
typedef void (*mp_attr_fun_t)(mp_obj_t self_in, qstr attr, mp_obj_t *dest);
typedef mp_obj_t (*mp_subscr_fun_t)(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
typedef mp_obj_t (*mp_getiter_fun_t)(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_buffer_info_t {





    void *buf;
    size_t len;
    int typecode;




} mp_buffer_info_t;



typedef struct _mp_buffer_p_t {
    mp_int_t (*get_buffer)(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
} mp_buffer_p_t;
_Bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);
void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags);

struct _mp_obj_type_t {

    mp_obj_base_t base;


    uint16_t flags;


    uint16_t name;


    mp_print_fun_t print;


    mp_make_new_fun_t make_new;


    mp_call_fun_t call;



    mp_unary_op_fun_t unary_op;
    mp_binary_op_fun_t binary_op;
# 496 "../../py/obj.h"
    mp_attr_fun_t attr;






    mp_subscr_fun_t subscr;




    mp_getiter_fun_t getiter;



    mp_fun_1_t iternext;


    mp_buffer_p_t buffer_p;


    const void *protocol;





    const void *parent;


    struct _mp_obj_dict_t *locals_dict;
};


extern const mp_obj_type_t mp_type_type;
extern const mp_obj_type_t mp_type_object;
extern const mp_obj_type_t mp_type_NoneType;
extern const mp_obj_type_t mp_type_bool;
extern const mp_obj_type_t mp_type_int;
extern const mp_obj_type_t mp_type_str;
extern const mp_obj_type_t mp_type_bytes;
extern const mp_obj_type_t mp_type_bytearray;
extern const mp_obj_type_t mp_type_memoryview;
extern const mp_obj_type_t mp_type_float;
extern const mp_obj_type_t mp_type_complex;
extern const mp_obj_type_t mp_type_tuple;
extern const mp_obj_type_t mp_type_list;
extern const mp_obj_type_t mp_type_map;
extern const mp_obj_type_t mp_type_enumerate;
extern const mp_obj_type_t mp_type_filter;
extern const mp_obj_type_t mp_type_deque;
extern const mp_obj_type_t mp_type_dict;
extern const mp_obj_type_t mp_type_ordereddict;
extern const mp_obj_type_t mp_type_range;
extern const mp_obj_type_t mp_type_set;
extern const mp_obj_type_t mp_type_frozenset;
extern const mp_obj_type_t mp_type_slice;
extern const mp_obj_type_t mp_type_zip;
extern const mp_obj_type_t mp_type_array;
extern const mp_obj_type_t mp_type_super;
extern const mp_obj_type_t mp_type_gen_wrap;
extern const mp_obj_type_t mp_type_gen_instance;
extern const mp_obj_type_t mp_type_fun_builtin_0;
extern const mp_obj_type_t mp_type_fun_builtin_1;
extern const mp_obj_type_t mp_type_fun_builtin_2;
extern const mp_obj_type_t mp_type_fun_builtin_3;
extern const mp_obj_type_t mp_type_fun_builtin_var;
extern const mp_obj_type_t mp_type_fun_bc;
extern const mp_obj_type_t mp_type_module;
extern const mp_obj_type_t mp_type_staticmethod;
extern const mp_obj_type_t mp_type_classmethod;
extern const mp_obj_type_t mp_type_property;
extern const mp_obj_type_t mp_type_stringio;
extern const mp_obj_type_t mp_type_bytesio;
extern const mp_obj_type_t mp_type_reversed;
extern const mp_obj_type_t mp_type_polymorph_iter;


extern const mp_obj_type_t mp_type_BaseException;
extern const mp_obj_type_t mp_type_ArithmeticError;
extern const mp_obj_type_t mp_type_AssertionError;
extern const mp_obj_type_t mp_type_AttributeError;
extern const mp_obj_type_t mp_type_EOFError;
extern const mp_obj_type_t mp_type_Exception;
extern const mp_obj_type_t mp_type_GeneratorExit;
extern const mp_obj_type_t mp_type_ImportError;
extern const mp_obj_type_t mp_type_IndentationError;
extern const mp_obj_type_t mp_type_IndexError;
extern const mp_obj_type_t mp_type_KeyboardInterrupt;
extern const mp_obj_type_t mp_type_KeyError;
extern const mp_obj_type_t mp_type_LookupError;
extern const mp_obj_type_t mp_type_MemoryError;
extern const mp_obj_type_t mp_type_NameError;
extern const mp_obj_type_t mp_type_NotImplementedError;
extern const mp_obj_type_t mp_type_OSError;
extern const mp_obj_type_t mp_type_TimeoutError;
extern const mp_obj_type_t mp_type_OverflowError;
extern const mp_obj_type_t mp_type_RuntimeError;
extern const mp_obj_type_t mp_type_StopAsyncIteration;
extern const mp_obj_type_t mp_type_StopIteration;
extern const mp_obj_type_t mp_type_SyntaxError;
extern const mp_obj_type_t mp_type_SystemExit;
extern const mp_obj_type_t mp_type_TypeError;
extern const mp_obj_type_t mp_type_UnicodeError;
extern const mp_obj_type_t mp_type_ValueError;
extern const mp_obj_type_t mp_type_ViperTypeError;
extern const mp_obj_type_t mp_type_ZeroDivisionError;
# 613 "../../py/obj.h"
extern const struct _mp_obj_none_t mp_const_none_obj;
extern const struct _mp_obj_bool_t mp_const_false_obj;
extern const struct _mp_obj_bool_t mp_const_true_obj;
extern const struct _mp_obj_str_t mp_const_empty_bytes_obj;
extern const struct _mp_obj_tuple_t mp_const_empty_tuple_obj;
extern const struct _mp_obj_singleton_t mp_const_ellipsis_obj;
extern const struct _mp_obj_singleton_t mp_const_notimplemented_obj;
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;



mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? (((mp_obj_t)&mp_const_true_obj)) : (((mp_obj_t)&mp_const_false_obj)); }
mp_obj_t mp_obj_new_cell(mp_obj_t obj);
mp_obj_t mp_obj_new_int(mp_int_t value);
mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value);
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, _Bool neg, unsigned int base);
mp_obj_t mp_obj_new_int_from_ll(long long val);
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val);
mp_obj_t mp_obj_new_str(const char* data, size_t len);
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len);
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr);
mp_obj_t mp_obj_new_bytes(const byte* data, size_t len);
mp_obj_t mp_obj_new_bytearray(size_t n, void *items);
mp_obj_t mp_obj_new_bytearray_by_ref(size_t n, void *items);

mp_obj_t mp_obj_new_int_from_float(mp_float_t val);
mp_obj_t mp_obj_new_complex(mp_float_t real, mp_float_t imag);

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type);
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg);
mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg);
mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...);
mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_native(mp_obj_t def_args_in, mp_obj_t def_kw_args, const void *fun_data, const mp_uint_t *const_table);
mp_obj_t mp_obj_new_fun_viper(size_t n_args, void *fun_data, mp_uint_t type_sig);
mp_obj_t mp_obj_new_fun_asm(size_t n_args, void *fun_data, mp_uint_t type_sig);
mp_obj_t mp_obj_new_gen_wrap(mp_obj_t fun);
mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed, const mp_obj_t *closed);
mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items);
mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items);
mp_obj_t mp_obj_new_dict(size_t n_args);
mp_obj_t mp_obj_new_set(size_t n_args, mp_obj_t *items);
mp_obj_t mp_obj_new_slice(mp_obj_t start, mp_obj_t stop, mp_obj_t step);
mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self);
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_obj_new_module(qstr module_name);
mp_obj_t mp_obj_new_memoryview(byte typecode, size_t nitems, void *items);

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in);
const char *mp_obj_get_type_str(mp_const_obj_t o_in);
_Bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo);
mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type);

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
void mp_obj_print(mp_obj_t o, mp_print_kind_t kind);
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc);

_Bool mp_obj_is_true(mp_obj_t arg);
_Bool mp_obj_is_callable(mp_obj_t o_in);
_Bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2);

static inline _Bool mp_obj_is_integer(mp_const_obj_t o) { return (MP_OBJ_IS_SMALL_INT(o) || (MP_OBJ_IS_OBJ(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_int)))) || (MP_OBJ_IS_OBJ(o) && (((mp_obj_base_t*)((void*)o))->type == (&mp_type_bool))); }
mp_int_t mp_obj_get_int(mp_const_obj_t arg);
mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg);
_Bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value);

mp_float_t mp_obj_get_float(mp_obj_t self_in);
_Bool mp_obj_get_float_maybe(mp_obj_t arg, mp_float_t *value);
void mp_obj_get_complex(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);


void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items);
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items);
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, _Bool is_slice);
mp_obj_t mp_obj_id(mp_obj_t o_in);
mp_obj_t mp_obj_len(mp_obj_t o_in);
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in);
mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t val);
mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in);


mp_obj_t mp_obj_cell_get(mp_obj_t self_in);
void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj);



mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in);

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in);



_Bool mp_obj_is_exception_type(mp_obj_t self_in);
_Bool mp_obj_is_exception_instance(mp_obj_t self_in);
_Bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type);
void mp_obj_exception_clear_traceback(mp_obj_t self_in);
void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block);
void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values);
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in);
mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_alloc_emergency_exception_buf(mp_obj_t size_in);
void mp_init_emergency_exception_buf(void);


_Bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2);
qstr mp_obj_str_get_qstr(mp_obj_t self_in);
const char *mp_obj_str_get_str(mp_obj_t self_in);
const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len);
mp_obj_t mp_obj_str_intern(mp_obj_t str);
mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj);
void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, _Bool is_bytes);






static inline mp_int_t mp_float_hash(mp_float_t val) { return (mp_int_t)val; }

mp_obj_t mp_obj_float_binary_op(mp_binary_op_t op, mp_float_t lhs_val, mp_obj_t rhs);


void mp_obj_complex_get(mp_obj_t self_in, mp_float_t *real, mp_float_t *imag);
mp_obj_t mp_obj_complex_binary_op(mp_binary_op_t op, mp_float_t lhs_real, mp_float_t lhs_imag, mp_obj_t rhs_in);





void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_tuple_del(mp_obj_t self_in);
mp_int_t mp_obj_tuple_hash(mp_obj_t self_in);


mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg);
mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value);
void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items);
void mp_obj_list_set_len(mp_obj_t self_in, size_t len);
void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);


typedef struct _mp_obj_dict_t {
    mp_obj_base_t base;
    mp_map_t map;
} mp_obj_dict_t;
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
    return &((mp_obj_dict_t*)((void*)dict))->map;
}


void mp_obj_set_store(mp_obj_t self_in, mp_obj_t item);


void mp_obj_slice_get(mp_obj_t self_in, mp_obj_t *start, mp_obj_t *stop, mp_obj_t *step);



typedef struct _mp_obj_fun_builtin_fixed_t {
    mp_obj_base_t base;
    union {
        mp_fun_0_t _0;
        mp_fun_1_t _1;
        mp_fun_2_t _2;
        mp_fun_3_t _3;
    } fun;
} mp_obj_fun_builtin_fixed_t;


typedef struct _mp_obj_fun_builtin_var_t {
    mp_obj_base_t base;
    _Bool is_kw : 1;
    mp_uint_t n_args_min : 15;
    mp_uint_t n_args_max : 16;
    union {
        mp_fun_var_t var;
        mp_fun_kw_t kw;
    } fun;
} mp_obj_fun_builtin_var_t;

qstr mp_obj_fun_get_name(mp_const_obj_t fun);
qstr mp_obj_code_get_name(const byte *code_info);

mp_obj_t mp_identity(mp_obj_t self);
extern const mp_obj_fun_builtin_fixed_t mp_identity_obj;
mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf);


typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
    return ((mp_obj_module_t*)((void*)module))->globals;
}

_Bool mp_obj_is_package(mp_obj_t module);



typedef struct _mp_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_obj_t fun;
} mp_obj_static_class_method_t;
typedef struct _mp_rom_obj_static_class_method_t {
    mp_obj_base_t base;
    mp_rom_obj_t fun;
} mp_rom_obj_static_class_method_t;


const mp_obj_t *mp_obj_property_get(mp_obj_t self_in);




typedef struct {
    mp_uint_t start;
    mp_uint_t stop;
    mp_int_t step;
} mp_bound_slice_t;

void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest);





_Bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2);
_Bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2);
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args);
mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value);
mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes);
# 31 "../../py/objint.h" 2

typedef struct _mp_obj_int_t {
    mp_obj_base_t base;





} mp_obj_int_t;

extern const mp_obj_int_t mp_maxsize_obj;


mp_float_t mp_obj_int_as_float_impl(mp_obj_t self_in);


size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma);

mp_obj_int_t *mp_obj_int_new_mpz(void);

void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind);
char *mp_obj_int_formatted(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                           int base, const char *prefix, char base_char, char comma);
char *mp_obj_int_formatted_impl(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                                int base, const char *prefix, char base_char, char comma);
mp_int_t mp_obj_int_hash(mp_obj_t self_in);
mp_obj_t mp_obj_int_from_bytes_impl(_Bool big_endian, size_t len, const byte *buf);
void mp_obj_int_to_bytes_impl(mp_obj_t self_in, _Bool big_endian, size_t len, byte *buf);
int mp_obj_int_sign(mp_obj_t self_in);
mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in);
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in);
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in);
mp_obj_t mp_obj_int_pow3(mp_obj_t base, mp_obj_t exponent, mp_obj_t modulus);
# 32 "../../py/modbuiltins.c" 2
# 1 "../../py/objstr.h" 1
# 31 "../../py/objstr.h"
typedef struct _mp_obj_str_t {
    mp_obj_base_t base;
    mp_uint_t hash;

    size_t len;
    const byte *data;
} mp_obj_str_t;
# 64 "../../py/objstr.h"
mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args);
void mp_str_print_json(const mp_print_t *print, const byte *str_data, size_t str_len);
mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);
mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args);
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len);
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len);

mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in);
mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags);

const byte *str_index_to_ptr(const mp_obj_type_t *type, const byte *self_data, size_t self_len,
                             mp_obj_t index, _Bool is_slice);
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction);

extern const mp_obj_fun_builtin_var_t str_encode_obj;
extern const mp_obj_fun_builtin_var_t str_find_obj;
extern const mp_obj_fun_builtin_var_t str_rfind_obj;
extern const mp_obj_fun_builtin_var_t str_index_obj;
extern const mp_obj_fun_builtin_var_t str_rindex_obj;
extern const mp_obj_fun_builtin_fixed_t str_join_obj;
extern const mp_obj_fun_builtin_var_t str_split_obj;
extern const mp_obj_fun_builtin_var_t str_splitlines_obj;
extern const mp_obj_fun_builtin_var_t str_rsplit_obj;
extern const mp_obj_fun_builtin_var_t str_startswith_obj;
extern const mp_obj_fun_builtin_var_t str_endswith_obj;
extern const mp_obj_fun_builtin_var_t str_strip_obj;
extern const mp_obj_fun_builtin_var_t str_lstrip_obj;
extern const mp_obj_fun_builtin_var_t str_rstrip_obj;
extern const mp_obj_fun_builtin_var_t str_format_obj;
extern const mp_obj_fun_builtin_var_t str_replace_obj;
extern const mp_obj_fun_builtin_var_t str_count_obj;
extern const mp_obj_fun_builtin_fixed_t str_partition_obj;
extern const mp_obj_fun_builtin_fixed_t str_rpartition_obj;
extern const mp_obj_fun_builtin_fixed_t str_center_obj;
extern const mp_obj_fun_builtin_fixed_t str_lower_obj;
extern const mp_obj_fun_builtin_fixed_t str_upper_obj;
extern const mp_obj_fun_builtin_fixed_t str_isspace_obj;
extern const mp_obj_fun_builtin_fixed_t str_isalpha_obj;
extern const mp_obj_fun_builtin_fixed_t str_isdigit_obj;
extern const mp_obj_fun_builtin_fixed_t str_isupper_obj;
extern const mp_obj_fun_builtin_fixed_t str_islower_obj;
# 33 "../../py/modbuiltins.c" 2
# 1 "../../py/objtype.h" 1
# 33 "../../py/objtype.h"
typedef struct _mp_obj_instance_t {
    mp_obj_base_t base;
    mp_map_t members;
    mp_obj_t subobj[];

} mp_obj_instance_t;







_Bool mp_obj_instance_is_callable(mp_obj_t self_in);
mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);




mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);
# 34 "../../py/modbuiltins.c" 2
# 1 "../../py/runtime.h" 1
# 29 "../../py/runtime.h"
# 1 "../../py/mpstate.h" 1
# 32 "../../py/mpstate.h"
# 1 "../../py/mpthread.h" 1
# 33 "../../py/mpstate.h" 2

# 1 "../../py/nlr.h" 1
# 32 "../../py/nlr.h"
# 1 "include/limits.h" 1
# 11 "include/limits.h"
# 1 "include/features.h" 1
# 12 "include/limits.h" 2
# 33 "../../py/nlr.h" 2
# 1 "include/assert.h" 1
# 39 "include/assert.h"
void __assert (const char *, int, const char *)
     __attribute__ ((__noreturn__));
void __assert_func (const char *, int, const char *, const char *)
     __attribute__ ((__noreturn__));
# 34 "../../py/nlr.h" 2
# 68 "../../py/nlr.h"
# 1 "include/setjmp.h" 1
# 10 "include/setjmp.h"
# 1 "include/machine/setjmp.h" 1


# 376 "include/machine/setjmp.h"
typedef int jmp_buf[20];




# 11 "include/setjmp.h" 2




void longjmp (jmp_buf __jmpb, int __retval)
   __attribute__ ((__noreturn__));



int setjmp (jmp_buf __jmpb);


# 69 "../../py/nlr.h" 2


typedef struct _nlr_buf_t nlr_buf_t;
struct _nlr_buf_t {

    nlr_buf_t *prev;
    void *ret_val;


    jmp_buf jmpbuf;







};
# 117 "../../py/nlr.h"
unsigned int nlr_push_tail(nlr_buf_t *top);
void nlr_pop(void);
__attribute__((noreturn)) void nlr_jump(void *val);




__attribute__((noreturn)) void nlr_jump_fail(void *val);
# 35 "../../py/mpstate.h" 2

# 1 "../../py/objlist.h" 1
# 31 "../../py/objlist.h"
typedef struct _mp_obj_list_t {
    mp_obj_base_t base;
    size_t alloc;
    size_t len;
    mp_obj_t *items;
} mp_obj_list_t;

void mp_obj_list_init(mp_obj_list_t *o, size_t n);
# 37 "../../py/mpstate.h" 2
# 1 "../../py/objexcept.h" 1
# 30 "../../py/objexcept.h"
# 1 "../../py/objtuple.h" 1
# 31 "../../py/objtuple.h"
typedef struct _mp_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_obj_t items[];
} mp_obj_tuple_t;

typedef struct _mp_rom_obj_tuple_t {
    mp_obj_base_t base;
    size_t len;
    mp_rom_obj_t items[];
} mp_rom_obj_tuple_t;

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in);
mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);
mp_obj_t mp_obj_tuple_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value);
mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf);

extern const mp_obj_type_t mp_type_attrtuple;
# 62 "../../py/objtuple.h"
mp_obj_t mp_obj_new_attrtuple(const qstr *fields, size_t n, const mp_obj_t *items);
# 31 "../../py/objexcept.h" 2

typedef struct _mp_obj_exception_t {
    mp_obj_base_t base;
    size_t traceback_alloc : (8 * sizeof(size_t) / 2);
    size_t traceback_len : (8 * sizeof(size_t) / 2);
    size_t *traceback_data;
    mp_obj_tuple_t *args;
} mp_obj_exception_t;

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind);
void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest);
# 38 "../../py/mpstate.h" 2
# 58 "../../py/mpstate.h"
typedef struct _mp_sched_item_t {
    mp_obj_t func;
    mp_obj_t arg;
} mp_sched_item_t;


typedef struct _mp_state_mem_t {






    byte *gc_alloc_table_start;
    size_t gc_alloc_table_byte_len;



    byte *gc_pool_start;
    byte *gc_pool_end;

    int gc_stack_overflow;
    size_t gc_stack[(64)];
    uint16_t gc_lock_depth;




    uint16_t gc_auto_collect_enabled;






    size_t gc_last_free_atb_index;
# 103 "../../py/mpstate.h"
} mp_state_mem_t;



typedef struct _mp_state_vm_t {







    qstr_pool_t *last_pool;


    mp_obj_exception_t mp_emergency_exception_obj;
# 137 "../../py/mpstate.h"
    mp_obj_dict_t mp_loaded_modules_dict;


    volatile mp_obj_t mp_pending_exception;
# 152 "../../py/mpstate.h"
    mp_obj_dict_t dict_main;


    mp_obj_list_t mp_sys_path_obj;
    mp_obj_list_t mp_sys_argv_obj;







    const char *readline_hist[8];
# 191 "../../py/mpstate.h"
    byte *qstr_last_chunk;
    size_t qstr_last_alloc;
    size_t qstr_last_used;







    mp_uint_t mp_optimise_value;
# 218 "../../py/mpstate.h"
} mp_state_vm_t;



typedef struct _mp_state_thread_t {

    char *stack_top;
# 242 "../../py/mpstate.h"
    mp_obj_dict_t *dict_locals;
    mp_obj_dict_t *dict_globals;

    nlr_buf_t *nlr_top;
} mp_state_thread_t;



typedef struct _mp_state_ctx_t {
    mp_state_thread_t thread;
    mp_state_vm_t vm;
    mp_state_mem_t mem;
} mp_state_ctx_t;

extern mp_state_ctx_t mp_state_ctx;
# 30 "../../py/runtime.h" 2
# 1 "../../py/pystack.h" 1
# 80 "../../py/pystack.h"
static inline void mp_local_free(void *ptr) {
    (void)ptr;
}

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    return ((uint8_t*)(m_malloc(sizeof(uint8_t) * (n_bytes))));
}

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    return ((uint8_t*)(m_realloc((ptr), sizeof(uint8_t) * (new_n_bytes))));
}

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    ((void)(n_bytes), m_free(ptr));
}
# 31 "../../py/runtime.h" 2

typedef enum {
    MP_VM_RETURN_NORMAL,
    MP_VM_RETURN_YIELD,
    MP_VM_RETURN_EXCEPTION,
} mp_vm_return_kind_t;

typedef enum {
    MP_ARG_BOOL = 0x001,
    MP_ARG_INT = 0x002,
    MP_ARG_OBJ = 0x003,
    MP_ARG_KIND_MASK = 0x0ff,
    MP_ARG_REQUIRED = 0x100,
    MP_ARG_KW_ONLY = 0x200,
} mp_arg_flag_t;

typedef union _mp_arg_val_t {
    _Bool u_bool;
    mp_int_t u_int;
    mp_obj_t u_obj;
    mp_rom_obj_t u_rom_obj;
} mp_arg_val_t;

typedef struct _mp_arg_t {
    uint16_t qst;
    uint16_t flags;
    mp_arg_val_t defval;
} mp_arg_t;


extern const byte mp_unary_op_method_name[];
extern const byte mp_binary_op_method_name[];

void mp_init(void);
void mp_deinit(void);

void mp_handle_pending(void);
void mp_handle_pending_tail(mp_uint_t atomic_state);
# 78 "../../py/runtime.h"
int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec);

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, _Bool takes_kw);
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
__attribute__((noreturn)) void mp_arg_error_terse_mismatch(void);
__attribute__((noreturn)) void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return (mp_state_ctx.thread.dict_locals); }
static inline void mp_locals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_locals) = d; }
static inline mp_obj_dict_t *mp_globals_get(void) { return (mp_state_ctx.thread.dict_globals); }
static inline void mp_globals_set(mp_obj_dict_t *d) { (mp_state_ctx.thread.dict_globals) = d; }

mp_obj_t mp_load_name(qstr qst);
mp_obj_t mp_load_global(qstr qst);
mp_obj_t mp_load_build_class(void);
void mp_store_name(qstr qst, mp_obj_t obj);
void mp_store_global(qstr qst, mp_obj_t obj);
void mp_delete_name(qstr qst);
void mp_delete_global(qstr qst);

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg);
mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs);

mp_obj_t mp_call_function_0(mp_obj_t fun);
mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg);
mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);
mp_obj_t mp_call_function_n_kw(mp_obj_t fun, size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_n_kw_var(_Bool have_self, size_t n_args_n_kw, const mp_obj_t *args);
mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args);


mp_obj_t mp_call_function_1_protected(mp_obj_t fun, mp_obj_t arg);
mp_obj_t mp_call_function_2_protected(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2);

typedef struct _mp_call_args_t {
    mp_obj_t fun;
    size_t n_args, n_kw, n_alloc;
    mp_obj_t *args;
} mp_call_args_t;
# 128 "../../py/runtime.h"
void mp_unpack_sequence(mp_obj_t seq, size_t num, mp_obj_t *items);
void mp_unpack_ex(mp_obj_t seq, size_t num, mp_obj_t *items);
mp_obj_t mp_store_map(mp_obj_t map, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_load_attr(mp_obj_t base, qstr attr);
void mp_convert_member_lookup(mp_obj_t obj, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest);
void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_method_maybe(mp_obj_t base, qstr attr, mp_obj_t *dest);
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, _Bool catch_all_exc);
void mp_load_super_method(qstr attr, mp_obj_t *dest);
void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t val);

mp_obj_t mp_getiter(mp_obj_t o, mp_obj_iter_buf_t *iter_buf);
mp_obj_t mp_iternext_allow_raise(mp_obj_t o);
mp_obj_t mp_iternext(mp_obj_t o);
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val);

mp_obj_t mp_make_raise_obj(mp_obj_t o);

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level);
mp_obj_t mp_import_from(mp_obj_t module, qstr name);
void mp_import_all(mp_obj_t module);

__attribute__((noreturn)) void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg);

__attribute__((noreturn)) void mp_raise_ValueError(const char *msg);
__attribute__((noreturn)) void mp_raise_TypeError(const char *msg);
__attribute__((noreturn)) void mp_raise_NotImplementedError(const char *msg);
__attribute__((noreturn)) void mp_raise_OSError(int errno_);
__attribute__((noreturn)) void mp_raise_recursion_depth(void);
# 169 "../../py/runtime.h"
mp_uint_t mp_convert_obj_to_native(mp_obj_t obj, mp_uint_t type);
mp_obj_t mp_convert_native_to_obj(mp_uint_t val, mp_uint_t type);
mp_obj_t mp_native_call_function_n_kw(mp_obj_t fun_in, size_t n_args_kw, const mp_obj_t *args);
void mp_native_raise(mp_obj_t o);
# 35 "../../py/modbuiltins.c" 2
# 1 "../../py/builtin.h" 1
# 31 "../../py/builtin.h"
mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args);
mp_obj_t mp_builtin_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);
mp_obj_t mp_micropython_mem_info(size_t n_args, const mp_obj_t *args);

extern const mp_obj_fun_builtin_var_t mp_builtin___build_class___obj;
extern const mp_obj_fun_builtin_var_t mp_builtin___import___obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin___repl_print___obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_abs_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_all_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_any_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_bin_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_callable_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_compile_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_chr_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_delattr_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_dir_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_divmod_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_eval_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_exec_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_execfile_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_getattr_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_setattr_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_globals_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_hasattr_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_hash_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_help_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_hex_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_id_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_isinstance_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_issubclass_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_iter_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_len_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_locals_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_max_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_min_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_next_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_oct_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_ord_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_pow_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_print_obj;
extern const mp_obj_fun_builtin_fixed_t mp_builtin_repr_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_round_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_sorted_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_sum_obj;

extern const mp_obj_fun_builtin_var_t mp_builtin_input_obj;
extern const mp_obj_fun_builtin_var_t mp_builtin_open_obj;

extern const mp_obj_fun_builtin_fixed_t mp_namedtuple_obj;

extern const mp_obj_fun_builtin_fixed_t mp_op_contains_obj;
extern const mp_obj_fun_builtin_fixed_t mp_op_getitem_obj;
extern const mp_obj_fun_builtin_fixed_t mp_op_setitem_obj;
extern const mp_obj_fun_builtin_fixed_t mp_op_delitem_obj;

extern const mp_obj_module_t mp_module___main__;
extern const mp_obj_module_t mp_module_builtins;
extern const mp_obj_module_t mp_module_array;
extern const mp_obj_module_t mp_module_collections;
extern const mp_obj_module_t mp_module_io;
extern const mp_obj_module_t mp_module_math;
extern const mp_obj_module_t mp_module_cmath;
extern const mp_obj_module_t mp_module_micropython;
extern const mp_obj_module_t mp_module_ustruct;
extern const mp_obj_module_t mp_module_sys;
extern const mp_obj_module_t mp_module_gc;
extern const mp_obj_module_t mp_module_thread;

extern const mp_obj_dict_t mp_module_builtins_globals;


extern const mp_obj_module_t mp_module_uerrno;
extern const mp_obj_module_t mp_module_uctypes;
extern const mp_obj_module_t mp_module_uzlib;
extern const mp_obj_module_t mp_module_ujson;
extern const mp_obj_module_t mp_module_ure;
extern const mp_obj_module_t mp_module_uheapq;
extern const mp_obj_module_t mp_module_uhashlib;
extern const mp_obj_module_t mp_module_ucryptolib;
extern const mp_obj_module_t mp_module_ubinascii;
extern const mp_obj_module_t mp_module_urandom;
extern const mp_obj_module_t mp_module_uselect;
extern const mp_obj_module_t mp_module_ussl;
extern const mp_obj_module_t mp_module_utimeq;
extern const mp_obj_module_t mp_module_machine;
extern const mp_obj_module_t mp_module_lwip;
extern const mp_obj_module_t mp_module_websocket;
extern const mp_obj_module_t mp_module_webrepl;
extern const mp_obj_module_t mp_module_framebuf;
extern const mp_obj_module_t mp_module_btree;

extern const char mp_help_default_text[];
# 36 "../../py/modbuiltins.c" 2
# 1 "../../py/stream.h" 1
# 30 "../../py/stream.h"
# 1 "../../py/mperrno.h" 1
# 89 "../../py/mperrno.h"
# 1 "include/errno.h" 1




typedef int error_t;



# 1 "include/sys/errno.h" 1
# 15 "include/sys/errno.h"
extern int *__errno (void);




extern const char * const _sys_errlist[];
extern int _sys_nerr;
# 10 "include/errno.h" 2
# 90 "../../py/mperrno.h" 2
# 31 "../../py/stream.h" 2
# 53 "../../py/stream.h"
struct mp_stream_seek_t {



    mp_off_t offset;
    int whence;
};







typedef struct _mp_stream_p_t {


    mp_uint_t (*read)(mp_obj_t obj, void *buf, mp_uint_t size, int *errcode);
    mp_uint_t (*write)(mp_obj_t obj, const void *buf, mp_uint_t size, int *errcode);
    mp_uint_t (*ioctl)(mp_obj_t obj, mp_uint_t request, uintptr_t arg, int *errcode);
    mp_uint_t is_text : 1;
} mp_stream_p_t;

extern const mp_obj_fun_builtin_var_t mp_stream_read_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_read1_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_readinto_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_unbuffered_readline_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_unbuffered_readlines_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_write_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_write1_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_close_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_seek_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_tell_obj;
extern const mp_obj_fun_builtin_fixed_t mp_stream_flush_obj;
extern const mp_obj_fun_builtin_var_t mp_stream_ioctl_obj;







static inline const mp_stream_p_t *mp_get_stream(mp_const_obj_t self) {
    return (const mp_stream_p_t*)((const mp_obj_base_t*)((void*)self))->type->protocol;
}

const mp_stream_p_t *mp_get_stream_raise(mp_obj_t self_in, int flags);
mp_obj_t mp_stream_close(mp_obj_t stream);


mp_obj_t mp_stream_unbuffered_iter(mp_obj_t self);

mp_obj_t mp_stream_write(mp_obj_t self_in, const void *buf, size_t len, byte flags);





mp_uint_t mp_stream_rw(mp_obj_t stream, void *buf, mp_uint_t size, int *errcode, byte flags);



void mp_stream_write_adaptor(void *self, const char *buf, size_t len);
# 37 "../../py/modbuiltins.c" 2


# 1 "include/math.h" 1
# 10 "include/math.h"

# 86 "include/math.h"
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);
# 150 "include/math.h"
    typedef float float_t;
    typedef double double_t;
# 194 "include/math.h"
extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 290 "include/math.h"
extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);
# 490 "include/math.h"
extern long double hypotl (long double, long double);
extern long double sqrtl (long double);
# 662 "include/math.h"

# 40 "../../py/modbuiltins.c" 2



extern struct _mp_dummy_t mp_sys_stdout_obj;





static mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
    ((2 <= n_args) ? (void)0 : __assert_func ("../../py/modbuiltins.c", 50, __func__, "2 <= n_args"));


    mp_obj_dict_t *old_locals = mp_locals_get();
    mp_obj_t class_locals = mp_obj_new_dict(0);
    mp_locals_set(((void*)class_locals));


    mp_obj_t cell = mp_call_function_0(args[0]);


    mp_locals_set(old_locals);


    mp_obj_t meta;
    if (n_args == 2) {

        meta = ((mp_obj_t)&mp_type_type);
    } else {

        meta = ((mp_obj_t)mp_obj_get_type(args[2]));
    }




    mp_obj_t meta_args[3];
    meta_args[0] = args[1];
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2);
    meta_args[2] = class_locals;
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);


    if (cell != (((mp_obj_t)&mp_const_none_obj))) {
        mp_obj_cell_set(cell, new_class);
    }

    return new_class;
}
const mp_obj_fun_builtin_var_t mp_builtin___build_class___obj = {{&mp_type_fun_builtin_var}, 0, 2, (0xffff), .fun.var = mp_builtin___build_class__};

static mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
}
const mp_obj_fun_builtin_fixed_t mp_builtin_abs_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_abs};

static mp_obj_t mp_builtin_all(mp_obj_t o_in) {
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != (((mp_obj_t)(void*)4))) {
        if (!mp_obj_is_true(item)) {
            return (((mp_obj_t)&mp_const_false_obj));
        }
    }
    return (((mp_obj_t)&mp_const_true_obj));
}
const mp_obj_fun_builtin_fixed_t mp_builtin_all_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_all};

static mp_obj_t mp_builtin_any(mp_obj_t o_in) {
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != (((mp_obj_t)(void*)4))) {
        if (mp_obj_is_true(item)) {
            return (((mp_obj_t)&mp_const_true_obj));
        }
    }
    return (((mp_obj_t)&mp_const_false_obj));
}
const mp_obj_fun_builtin_fixed_t mp_builtin_any_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_any};

static mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
    mp_obj_t args[] = { ((mp_obj_t)((((mp_uint_t)(MP_QSTR__brace_open__colon__hash_b_brace_close_)) << 2) | 2)), o_in };
    return mp_obj_str_format((sizeof(args) / sizeof((args)[0])), args, ((void *)0));
}
const mp_obj_fun_builtin_fixed_t mp_builtin_bin_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_bin};

static mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
    if (mp_obj_is_callable(o_in)) {
        return (((mp_obj_t)&mp_const_true_obj));
    } else {
        return (((mp_obj_t)&mp_const_false_obj));
    }
}
const mp_obj_fun_builtin_fixed_t mp_builtin_callable_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_callable};

static mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
# 164 "../../py/modbuiltins.c"
    mp_int_t ord = mp_obj_get_int(o_in);
    if (0 <= ord && ord <= 0xff) {
        uint8_t str[1] = {ord};
        return mp_obj_new_str_via_qstr((char*)str, 1);
    } else {
        mp_raise_ValueError("chr() arg not in range(256)");
    }

}
const mp_obj_fun_builtin_fixed_t mp_builtin_chr_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_chr};

static mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
    mp_obj_t dir = mp_obj_new_list(0, ((void *)0));
    if (n_args == 0) {

        mp_obj_dict_t *dict = mp_locals_get();
        for (size_t i = 0; i < dict->map.alloc; i++) {
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
                mp_obj_list_append(dir, dict->map.table[i].key);
            }
        }
    } else {


        size_t nqstr = ((mp_state_ctx.vm.last_pool)->total_prev_len + (mp_state_ctx.vm.last_pool)->len);
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
            mp_obj_t dest[2];
            mp_load_method_protected(args[0], i, dest, 0);
            if (dest[0] != (((mp_obj_t)(void*)0))) {







                mp_obj_list_append(dir, ((mp_obj_t)((((mp_uint_t)(i)) << 2) | 2)));
            }
        }
    }
    return dir;
}
const mp_obj_fun_builtin_var_t mp_builtin_dir_obj = {{&mp_type_fun_builtin_var}, 0, 0, 1, .fun.var = mp_builtin_dir};

static mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
}
const mp_obj_fun_builtin_fixed_t mp_builtin_divmod_obj = {{&mp_type_fun_builtin_2}, .fun._2 = mp_builtin_divmod};

static mp_obj_t mp_builtin_hash(mp_obj_t o_in) {

    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
}
const mp_obj_fun_builtin_fixed_t mp_builtin_hash_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_hash};

static mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
    return mp_binary_op(MP_BINARY_OP_MODULO, ((mp_obj_t)((((mp_uint_t)(MP_QSTR__percent__hash_x)) << 2) | 2)), o_in);
}
const mp_obj_fun_builtin_fixed_t mp_builtin_hex_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_hex};



# 1 "../../py/mphal.h" 1
# 34 "../../py/mphal.h"
# 1 "./mphalport.h" 1
static inline mp_uint_t mp_hal_ticks_ms(void) { return 0; }
static inline void mp_hal_set_interrupt_char(char c) {}
# 35 "../../py/mphal.h" 2



int mp_hal_stdin_rx_chr(void);



void mp_hal_stdout_tx_str(const char *str);



void mp_hal_stdout_tx_strn(const char *str, size_t len);



void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len);



void mp_hal_delay_ms(mp_uint_t ms);



void mp_hal_delay_us(mp_uint_t us);



mp_uint_t mp_hal_ticks_ms(void);



mp_uint_t mp_hal_ticks_us(void);



mp_uint_t mp_hal_ticks_cpu(void);
# 80 "../../py/mphal.h"
# 1 "../../extmod/virtpin.h" 1
# 37 "../../extmod/virtpin.h"
typedef struct _mp_pin_p_t {
    mp_uint_t (*ioctl)(mp_obj_t obj, mp_uint_t request, uintptr_t arg, int *errcode);
} mp_pin_p_t;

int mp_virtual_pin_read(mp_obj_t pin);
void mp_virtual_pin_write(mp_obj_t pin, int value);


mp_obj_t mp_pin_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args);
# 81 "../../py/mphal.h" 2
# 227 "../../py/modbuiltins.c" 2
# 1 "../../lib/mp-readline/readline.h" 1
# 40 "../../lib/mp-readline/readline.h"
void readline_init0(void);
int readline(vstr_t *line, const char *prompt, char *text);
void readline_push_history(const char *line);

void readline_init(vstr_t *line, const char *prompt);
void readline_note_newline(const char *prompt);
int readline_process_char(int c);
# 228 "../../py/modbuiltins.c" 2






static mp_obj_t mp_builtin_input(size_t n_args, const mp_obj_t *args) {
    if (n_args == 1) {
        mp_obj_print(args[0], PRINT_STR);
    }
    vstr_t line;
    vstr_init(&line, 16);
    int ret = readline(&line, "", ((void *)0));
    if (ret == (3)) {
        nlr_jump(((void*)mp_obj_new_exception(&mp_type_KeyboardInterrupt)));
    }
    if (line.len == 0 && ret == (4)) {
        nlr_jump(((void*)mp_obj_new_exception(&mp_type_EOFError)));
    }
    return mp_obj_new_str_from_vstr(&mp_type_str, &line);
}
const mp_obj_fun_builtin_var_t mp_builtin_input_obj = {{&mp_type_fun_builtin_var}, 0, 0, 1, .fun.var = mp_builtin_input};



static mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
    return mp_getiter(o_in, ((void *)0));
}
const mp_obj_fun_builtin_fixed_t mp_builtin_iter_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_iter};
# 314 "../../py/modbuiltins.c"
static mp_obj_t mp_builtin_next(mp_obj_t o) {
    mp_obj_t ret = mp_iternext_allow_raise(o);
    if (ret == (((mp_obj_t)(void*)4))) {
        nlr_jump(((void*)mp_obj_new_exception(&mp_type_StopIteration)));
    } else {
        return ret;
    }
}
const mp_obj_fun_builtin_fixed_t mp_builtin_next_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_next};

static mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
    return mp_binary_op(MP_BINARY_OP_MODULO, ((mp_obj_t)((((mp_uint_t)(MP_QSTR__percent__hash_o)) << 2) | 2)), o_in);
}
const mp_obj_fun_builtin_fixed_t mp_builtin_oct_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_oct};

static mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
    size_t len;
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
# 340 "../../py/modbuiltins.c"
    {

        if (len == 1) {
            return ((mp_obj_t)((((mp_uint_t)(str[0])) << 1) | 1));
        }
    }

    if (((1)) == (1)) {
        mp_raise_TypeError("ord expects a character");
    } else {
        nlr_jump(((void*)mp_obj_new_exception_msg_varg(&mp_type_TypeError, "ord() expected a character, but string of length %d found", (int)len)))
                                                                                   ;
    }
}
const mp_obj_fun_builtin_fixed_t mp_builtin_ord_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_ord};

static mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
    switch (n_args) {
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
        default:

            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");





    }
}
const mp_obj_fun_builtin_var_t mp_builtin_pow_obj = {{&mp_type_fun_builtin_var}, 0, 2, 3, .fun.var = mp_builtin_pow};

static mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
    enum { ARG_sep, ARG_end, ARG_file };
    static const mp_arg_t allowed_args[] = {
        { MP_QSTR_sep, MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_rom_obj = ((mp_obj_t)((((mp_uint_t)(MP_QSTR__space_)) << 2) | 2))} },
        { MP_QSTR_end, MP_ARG_KW_ONLY | MP_ARG_OBJ, {.u_rom_obj = ((mp_obj_t)((((mp_uint_t)(MP_QSTR__0x0a_)) << 2) | 2))} },



    };


    union {
        mp_arg_val_t args[(sizeof(allowed_args) / sizeof((allowed_args)[0]))];
        size_t len[2];
    } u;
    mp_arg_parse_all(0, ((void *)0), kw_args, (sizeof(allowed_args) / sizeof((allowed_args)[0])), allowed_args, u.args);







    mp_obj_t sep = u.args[ARG_sep].u_obj;
    mp_obj_t end = u.args[ARG_end].u_obj;
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);

    for (size_t i = 0; i < n_args; i++) {
        if (i > 0) {



            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);

        }



        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);

    }



    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);

    return (((mp_obj_t)&mp_const_none_obj));
}
const mp_obj_fun_builtin_var_t mp_builtin_print_obj = {{&mp_type_fun_builtin_var}, 1, 0, (0xffff), .fun.kw = mp_builtin_print};

static mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
    if (o != (((mp_obj_t)&mp_const_none_obj))) {
        mp_obj_print_helper(&mp_plat_print, o, PRINT_REPR);
        mp_print_str(&mp_plat_print, "\n");





    }
    return (((mp_obj_t)&mp_const_none_obj));
}
const mp_obj_fun_builtin_fixed_t mp_builtin___repl_print___obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin___repl_print__};

static mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
}
const mp_obj_fun_builtin_fixed_t mp_builtin_repr_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_builtin_repr};

static mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
    mp_obj_t o_in = args[0];
    if ((MP_OBJ_IS_SMALL_INT(o_in) || (MP_OBJ_IS_OBJ(o_in) && (((mp_obj_base_t*)((void*)o_in))->type == (&mp_type_int))))) {
        if (n_args <= 1) {
            return o_in;
        }


        mp_raise_NotImplementedError(((void *)0));
# 478 "../../py/modbuiltins.c"
    }

    mp_float_t val = mp_obj_get_float(o_in);
    if (n_args > 1) {
        mp_int_t num_dig = mp_obj_get_int(args[1]);
        mp_float_t mult = pow(10, num_dig);

        mp_float_t rounded = nearbyint(val * mult) / mult;
        return mp_obj_new_float(rounded);
    }
    mp_float_t rounded = nearbyint(val);
    return mp_obj_new_int_from_float(rounded);




}
const mp_obj_fun_builtin_var_t mp_builtin_round_obj = {{&mp_type_fun_builtin_var}, 0, 1, 2, .fun.var = mp_builtin_round};

static mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
    mp_obj_t value;
    switch (n_args) {
        case 1: value = ((mp_obj_t)((((mp_uint_t)(0)) << 1) | 1)); break;
        default: value = args[1]; break;
    }
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != (((mp_obj_t)(void*)4))) {
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
    }
    return value;
}
const mp_obj_fun_builtin_var_t mp_builtin_sum_obj = {{&mp_type_fun_builtin_var}, 0, 1, 2, .fun.var = mp_builtin_sum};

static mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    if (n_args > 1) {
        mp_raise_TypeError("must use keyword argument for key function");
    }
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
    mp_obj_list_sort(1, &self, kwargs);

    return self;
}
const mp_obj_fun_builtin_var_t mp_builtin_sorted_obj = {{&mp_type_fun_builtin_var}, 1, 1, (0xffff), .fun.kw = mp_builtin_sorted};


static inline mp_obj_t mp_load_attr_default(mp_obj_t base, qstr attr, mp_obj_t defval) {
    mp_obj_t dest[2];

    ((defval == (((mp_obj_t)(void*)0))) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
    if (dest[0] == (((mp_obj_t)(void*)0))) {
        return defval;
    } else if (dest[1] == (((mp_obj_t)(void*)0))) {

        return dest[0];
    } else {

        return mp_obj_new_bound_meth(dest[0], dest[1]);
    }
}

static mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
    mp_obj_t defval = (((mp_obj_t)(void*)0));
    if (n_args > 2) {
        defval = args[2];
    }
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
}
const mp_obj_fun_builtin_var_t mp_builtin_getattr_obj = {{&mp_type_fun_builtin_var}, 0, 2, 3, .fun.var = mp_builtin_getattr};

static mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
    return (((mp_obj_t)&mp_const_none_obj));
}
const mp_obj_fun_builtin_fixed_t mp_builtin_setattr_obj = {{&mp_type_fun_builtin_3}, .fun._3 = mp_builtin_setattr};
# 562 "../../py/modbuiltins.c"
static mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
    qstr attr = mp_obj_str_get_qstr(attr_in);
    mp_obj_t dest[2];
    mp_load_method_protected(object_in, attr, dest, 0);
    return mp_obj_new_bool(dest[0] != (((mp_obj_t)(void*)0)));
}
const mp_obj_fun_builtin_fixed_t mp_builtin_hasattr_obj = {{&mp_type_fun_builtin_2}, .fun._2 = mp_builtin_hasattr};

static mp_obj_t mp_builtin_globals(void) {
    return ((mp_obj_t)mp_globals_get());
}
const mp_obj_fun_builtin_fixed_t mp_builtin_globals_obj = {{&mp_type_fun_builtin_0}, .fun._0 = mp_builtin_globals};

static mp_obj_t mp_builtin_locals(void) {
    return ((mp_obj_t)mp_locals_get());
}
const mp_obj_fun_builtin_fixed_t mp_builtin_locals_obj = {{&mp_type_fun_builtin_0}, .fun._0 = mp_builtin_locals};


const mp_obj_fun_builtin_fixed_t mp_builtin_id_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_obj_id};
const mp_obj_fun_builtin_fixed_t mp_builtin_len_obj = {{&mp_type_fun_builtin_1}, .fun._1 = mp_obj_len};

static const mp_rom_map_elem_t mp_module_builtins_globals_table[] = {
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR___name__)) << 2) | 2)), ((mp_obj_t)((((mp_uint_t)(MP_QSTR_builtins)) << 2) | 2)) },


    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR___build_class__)) << 2) | 2)), (&mp_builtin___build_class___obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR___import__)) << 2) | 2)), (&mp_builtin___import___obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR___repl_print__)) << 2) | 2)), (&mp_builtin___repl_print___obj) },


    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bool)) << 2) | 2)), (&mp_type_bool) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bytes)) << 2) | 2)), (&mp_type_bytes) },




    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_complex)) << 2) | 2)), (&mp_type_complex) },

    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_dict)) << 2) | 2)), (&mp_type_dict) },







    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_float)) << 2) | 2)), (&mp_type_float) },




    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_int)) << 2) | 2)), (&mp_type_int) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_list)) << 2) | 2)), (&mp_type_list) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_map)) << 2) | 2)), (&mp_type_map) },



    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_object)) << 2) | 2)), (&mp_type_object) },



    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_range)) << 2) | 2)), (&mp_type_range) },
# 634 "../../py/modbuiltins.c"
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_str)) << 2) | 2)), (&mp_type_str) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_super)) << 2) | 2)), (&mp_type_super) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_tuple)) << 2) | 2)), (&mp_type_tuple) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_type)) << 2) | 2)), (&mp_type_type) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_zip)) << 2) | 2)), (&mp_type_zip) },

    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_classmethod)) << 2) | 2)), (&mp_type_classmethod) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_staticmethod)) << 2) | 2)), (&mp_type_staticmethod) },


    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_Ellipsis)) << 2) | 2)), (&mp_const_ellipsis_obj) },





    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_abs)) << 2) | 2)), (&mp_builtin_abs_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_all)) << 2) | 2)), (&mp_builtin_all_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_any)) << 2) | 2)), (&mp_builtin_any_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_bin)) << 2) | 2)), (&mp_builtin_bin_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_callable)) << 2) | 2)), (&mp_builtin_callable_obj) },



    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_chr)) << 2) | 2)), (&mp_builtin_chr_obj) },



    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_dir)) << 2) | 2)), (&mp_builtin_dir_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_divmod)) << 2) | 2)), (&mp_builtin_divmod_obj) },

    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_eval)) << 2) | 2)), (&mp_builtin_eval_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_exec)) << 2) | 2)), (&mp_builtin_exec_obj) },




    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_getattr)) << 2) | 2)), (&mp_builtin_getattr_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_setattr)) << 2) | 2)), (&mp_builtin_setattr_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_globals)) << 2) | 2)), (&mp_builtin_globals_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_hasattr)) << 2) | 2)), (&mp_builtin_hasattr_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_hash)) << 2) | 2)), (&mp_builtin_hash_obj) },



    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_hex)) << 2) | 2)), (&mp_builtin_hex_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_id)) << 2) | 2)), (&mp_builtin_id_obj) },

    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_input)) << 2) | 2)), (&mp_builtin_input_obj) },

    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_isinstance)) << 2) | 2)), (&mp_builtin_isinstance_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_issubclass)) << 2) | 2)), (&mp_builtin_issubclass_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_iter)) << 2) | 2)), (&mp_builtin_iter_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_len)) << 2) | 2)), (&mp_builtin_len_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_locals)) << 2) | 2)), (&mp_builtin_locals_obj) },




    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_next)) << 2) | 2)), (&mp_builtin_next_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_oct)) << 2) | 2)), (&mp_builtin_oct_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_ord)) << 2) | 2)), (&mp_builtin_ord_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_pow)) << 2) | 2)), (&mp_builtin_pow_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_print)) << 2) | 2)), (&mp_builtin_print_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_repr)) << 2) | 2)), (&mp_builtin_repr_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_round)) << 2) | 2)), (&mp_builtin_round_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_sorted)) << 2) | 2)), (&mp_builtin_sorted_obj) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_sum)) << 2) | 2)), (&mp_builtin_sum_obj) },


    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_BaseException)) << 2) | 2)), (&mp_type_BaseException) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_ArithmeticError)) << 2) | 2)), (&mp_type_ArithmeticError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_AssertionError)) << 2) | 2)), (&mp_type_AssertionError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_AttributeError)) << 2) | 2)), (&mp_type_AttributeError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_EOFError)) << 2) | 2)), (&mp_type_EOFError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_Exception)) << 2) | 2)), (&mp_type_Exception) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_GeneratorExit)) << 2) | 2)), (&mp_type_GeneratorExit) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_ImportError)) << 2) | 2)), (&mp_type_ImportError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IndentationError)) << 2) | 2)), (&mp_type_IndentationError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_IndexError)) << 2) | 2)), (&mp_type_IndexError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_KeyboardInterrupt)) << 2) | 2)), (&mp_type_KeyboardInterrupt) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_KeyError)) << 2) | 2)), (&mp_type_KeyError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_LookupError)) << 2) | 2)), (&mp_type_LookupError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_MemoryError)) << 2) | 2)), (&mp_type_MemoryError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_NameError)) << 2) | 2)), (&mp_type_NameError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_NotImplementedError)) << 2) | 2)), (&mp_type_NotImplementedError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_OSError)) << 2) | 2)), (&mp_type_OSError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_OverflowError)) << 2) | 2)), (&mp_type_OverflowError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_RuntimeError)) << 2) | 2)), (&mp_type_RuntimeError) },



    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_StopIteration)) << 2) | 2)), (&mp_type_StopIteration) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_SyntaxError)) << 2) | 2)), (&mp_type_SyntaxError) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_SystemExit)) << 2) | 2)), (&mp_type_SystemExit) },
    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_TypeError)) << 2) | 2)), (&mp_type_TypeError) },



    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_ValueError)) << 2) | 2)), (&mp_type_ValueError) },



    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_ZeroDivisionError)) << 2) | 2)), (&mp_type_ZeroDivisionError) },




    { ((mp_obj_t)((((mp_uint_t)(MP_QSTR_open)) << 2) | 2)), (&mp_builtin_open_obj) },
};

const mp_obj_dict_t mp_module_builtins_globals = { .base = {&mp_type_dict}, .map = { .all_keys_are_qstrs = 1, .is_fixed = 1, .is_ordered = 1, .used = (sizeof(mp_module_builtins_globals_table) / sizeof((mp_module_builtins_globals_table)[0])), .alloc = (sizeof(mp_module_builtins_globals_table) / sizeof((mp_module_builtins_globals_table)[0])), .table = (mp_map_elem_t*)(mp_rom_map_elem_t*)mp_module_builtins_globals_table, }, };

const mp_obj_module_t mp_module_builtins = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&mp_module_builtins_globals,
};
